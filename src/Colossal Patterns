{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Colossal Patterns","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"k-oJIBM9zDKV","executionInfo":{"status":"ok","timestamp":1605415992091,"user_tz":-420,"elapsed":25376,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"b512c047-94f5-4242-90d9-0341fb36df78","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"O0c0r5Y8zWpa"},"source":["#### LOAD DATA"]},{"cell_type":"code","metadata":{"id":"G_farGJb5tQy","executionInfo":{"status":"ok","timestamp":1605415995210,"user_tz":-420,"elapsed":2404,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"cd11f930-25ef-4908-b5e3-469018fcff0c","colab":{"base_uri":"https://localhost:8080/","height":415}},"source":["import pandas as pd\n","df = pd.read_csv('drive/My Drive/Colab Notebooks/DBM/Groceries_dataset.csv',parse_dates=['Date'])\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Member_number</th>\n","      <th>Date</th>\n","      <th>itemDescription</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1808</td>\n","      <td>2015-07-21</td>\n","      <td>tropical fruit</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2552</td>\n","      <td>2015-05-01</td>\n","      <td>whole milk</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2300</td>\n","      <td>2015-09-19</td>\n","      <td>pip fruit</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1187</td>\n","      <td>2015-12-12</td>\n","      <td>other vegetables</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3037</td>\n","      <td>2015-01-02</td>\n","      <td>whole milk</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>38760</th>\n","      <td>4471</td>\n","      <td>2014-08-10</td>\n","      <td>sliced cheese</td>\n","    </tr>\n","    <tr>\n","      <th>38761</th>\n","      <td>2022</td>\n","      <td>2014-02-23</td>\n","      <td>candy</td>\n","    </tr>\n","    <tr>\n","      <th>38762</th>\n","      <td>1097</td>\n","      <td>2014-04-16</td>\n","      <td>cake bar</td>\n","    </tr>\n","    <tr>\n","      <th>38763</th>\n","      <td>1510</td>\n","      <td>2014-03-12</td>\n","      <td>fruit/vegetable juice</td>\n","    </tr>\n","    <tr>\n","      <th>38764</th>\n","      <td>1521</td>\n","      <td>2014-12-26</td>\n","      <td>cat food</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38765 rows × 3 columns</p>\n","</div>"],"text/plain":["       Member_number       Date        itemDescription\n","0               1808 2015-07-21         tropical fruit\n","1               2552 2015-05-01             whole milk\n","2               2300 2015-09-19              pip fruit\n","3               1187 2015-12-12       other vegetables\n","4               3037 2015-01-02             whole milk\n","...              ...        ...                    ...\n","38760           4471 2014-08-10          sliced cheese\n","38761           2022 2014-02-23                  candy\n","38762           1097 2014-04-16               cake bar\n","38763           1510 2014-03-12  fruit/vegetable juice\n","38764           1521 2014-12-26               cat food\n","\n","[38765 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"KixpdOpMx6ez"},"source":["#### RENAME ITEMS"]},{"cell_type":"code","metadata":{"id":"Eca0uwpS572U","executionInfo":{"status":"ok","timestamp":1605230273884,"user_tz":-420,"elapsed":703,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"ef028ff2-15f4-4799-fb88-e41dcaf71e22","colab":{"base_uri":"https://localhost:8080/","height":415}},"source":["products = df[\"itemDescription\"].unique()\n","# dic = {}\n","# num = 1\n","# for i in products:\n","#   dic[i] = num\n","#   num+=1\n","\n","arr = []\n","for i in range(1, len(products) + 1):\n","  arr.append(i)\n","\n","df['itemDescription'] = df['itemDescription'].replace(products,arr)\n","df = df.drop(\"Date\", axis=1)\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Member_number</th>\n","      <th>itemDescription</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1808</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2552</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2300</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1187</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3037</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>38760</th>\n","      <td>4471</td>\n","      <td>76</td>\n","    </tr>\n","    <tr>\n","      <th>38761</th>\n","      <td>2022</td>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>38762</th>\n","      <td>1097</td>\n","      <td>154</td>\n","    </tr>\n","    <tr>\n","      <th>38763</th>\n","      <td>1510</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>38764</th>\n","      <td>1521</td>\n","      <td>104</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>38765 rows × 2 columns</p>\n","</div>"],"text/plain":["       Member_number  itemDescription\n","0               1808                1\n","1               2552                2\n","2               2300                3\n","3               1187                4\n","4               3037                2\n","...              ...              ...\n","38760           4471               76\n","38761           2022               65\n","38762           1097              154\n","38763           1510               12\n","38764           1521              104\n","\n","[38765 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"6HhgWh0LxzzS"},"source":["#### WRITE FILE"]},{"cell_type":"code","metadata":{"id":"4iI546TZA9E-","executionInfo":{"status":"ok","timestamp":1605230277032,"user_tz":-420,"elapsed":711,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"03b71628-0941-4cf8-9097-80f3972958dd","colab":{"base_uri":"https://localhost:8080/","height":433}},"source":["data = df.groupby('Member_number', sort=True)['itemDescription'].apply(list).reset_index(name='transaction')\n","print(len(data))\n","data = data.iloc[:150]\n","data"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3898\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Member_number</th>\n","      <th>transaction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1000</td>\n","      <td>[38, 25, 19, 19, 2, 2, 62, 28, 103, 96, 18, 24...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1001</td>\n","      <td>[9, 9, 8, 19, 2, 38, 45, 83, 2, 38, 74, 5]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1002</td>\n","      <td>[1, 16, 11, 75, 35, 53, 2, 4]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1003</td>\n","      <td>[19, 22, 5, 39, 36, 5, 130, 5]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1004</td>\n","      <td>[4, 3, 22, 25, 5, 2, 4, 96, 2, 2, 95, 32, 14, ...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>1151</td>\n","      <td>[26, 45, 3, 128, 24]</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>1152</td>\n","      <td>[2, 23, 38, 31, 5, 69, 36, 38]</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>1153</td>\n","      <td>[2, 11, 9, 10, 100, 1, 40, 58, 128, 154, 2, 5,...</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>1154</td>\n","      <td>[22, 7, 19, 84, 4, 2, 25, 5, 75]</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>1155</td>\n","      <td>[2, 9, 2, 19, 88, 111, 82, 18]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 2 columns</p>\n","</div>"],"text/plain":["     Member_number                                        transaction\n","0             1000  [38, 25, 19, 19, 2, 2, 62, 28, 103, 96, 18, 24...\n","1             1001         [9, 9, 8, 19, 2, 38, 45, 83, 2, 38, 74, 5]\n","2             1002                      [1, 16, 11, 75, 35, 53, 2, 4]\n","3             1003                     [19, 22, 5, 39, 36, 5, 130, 5]\n","4             1004  [4, 3, 22, 25, 5, 2, 4, 96, 2, 2, 95, 32, 14, ...\n","..             ...                                                ...\n","145           1151                               [26, 45, 3, 128, 24]\n","146           1152                     [2, 23, 38, 31, 5, 69, 36, 38]\n","147           1153  [2, 11, 9, 10, 100, 1, 40, 58, 128, 154, 2, 5,...\n","148           1154                   [22, 7, 19, 84, 4, 2, 25, 5, 75]\n","149           1155                     [2, 9, 2, 19, 88, 111, 82, 18]\n","\n","[150 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"HgO5XNKiw69r"},"source":["with open('drive/My Drive/Colab Notebooks/DBM/Grocery.txt', 'w') as f:\n","    f.truncate()\n","    for list in data['transaction']:\n","        line = \"\"\n","        for value in list:\n","            line += str(value) + ','\n","        line = line[:len(line)-1] + '\\n'\n","        f.write(line)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YCWPzzieKOjv"},"source":["#### CP Miner"]},{"cell_type":"code","metadata":{"id":"JuqhFTV8qJkx"},"source":["import csv\n","\n","class node:\n","    def __init__(self):\n","        self.id = \"\"\n","        self.transactions = []\n","        self.pattern = []\n","        self.support = 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SVM1JhZPqJnJ"},"source":["class cp_miner:\n","    def __init__(self,f,sup):\n","\n","        # minimum support will change for test i have taken it as 2\n","        # unique will count the frequency of the 1 items it is kind of header table\n","        file = f \n","        self.rows = [] #transaction\n","        self.count = 0 #the number of items\n","        self.unique = {} #items\n","        # Get unique items and the frequency of them\n","        with open(file, 'r') as csvfile:\n","            csvreader = csv.reader(csvfile)\n","            for row in csvreader:\n","                self.rows.append(row)\n","                for j in row:\n","                    if j not in self.unique:\n","                        self.unique[j] = 1\n","                        self.count+=1\n","                    else:\n","                        self.unique[j] += 1\n","        self.minSup = sup\n","        self.after_preprocessing = []\n","        self.maxlen = 0\n","        self.map_bits = {}\n","        self.map_res = {}\n","        self.dbv = []\n","        self.colossal_pattern = []\n","        self.count = 0\n","        self.start = 0\n","\n","    def preprocess_1_itemset(self):\n","        # Remove items that Sup < minSup\n","        for i in self.rows:\n","            temp = []\n","            for j in i:\n","                if self.unique[j] >= self.minSup:\n","                    temp.append(j)\n","            if len(temp) != 0:\n","                self.after_preprocessing.append(sorted(temp))\n","        self.rows = []\n","\n","    def assign_dbv(self):\n","        # Assiging the DBV to the transactions which are left \n","        forsorting = []\n","        for key,values in self.unique.items():\n","            if values >= self.minSup:\n","                forsorting.append(key)\n","        forsorting = sorted(forsorting)\n","        for i in range(len(forsorting)):\n","            self.map_bits[forsorting[i]]= i\n","            self.map_res[i]= forsorting[i]\n","        self.maxlen = max(self.maxlen,len(forsorting))\n","        for i in self.after_preprocessing:\n","            pattern = [0]*self.maxlen\n","            for j in i:\n","                #dynamic bit vector\n","                pattern[self.map_bits[j]] = 1\n","            self.dbv.append(pattern)\n","\n","    def make_tree(self,patterns):\n","        levels = []\n","        level = node()\n","        for i in range(len(patterns)):\n","            newnode =  node()\n","            newnode.support = 1\n","            newnode.pattern = patterns[i]\n","            newnode.id = str(i+1)\n","            level.transactions.append(newnode)\n","        level.support = 1\n","        levels.append(level)\n","        self.run_miner(levels)\n","\n","    def newpattern(self,a,b):\n","        newpat = []\n","        for i in range(len(a)):\n","            newpat.append(a[i]&b[i])\n","        return newpat\n","\n","    def check_child(self,a,b):\n","        for i in range(len(a)):\n","            if b[i] == 1 and a[i] == 0:\n","                return False\n","        return True\n","\n","    def check_clossal(self,node):\n","        for pattern  in self.colossal_pattern:\n","            if self.check_child(pattern,node.pattern):\n","                return False\n","        return True\n","\n","    def checknull(self,a):\n","        for i in a:\n","            if i!=0:\n","                return False\n","        return True\n","\n","    def check_reverse(self,node):\n","        i = 0\n","        while i < len(sefl.colossal_pattern):\n","          pattern = self.colossal_pattern[i]\n","          TF = True \n","          for j in range(len(node)):\n","            if pattern[j] == 1 and node[j] == 0:\n","              TF = False\n","              break\n","          if TF:\n","            self.colossal_pattern.remove(pattern)\n","          else:\n","            i+=1\n","\n","    def run_miner(self,levels):\n","        new_levels = []\n","        #run through child-levels\n","        for level in levels:\n","            self.count += len(level.transactions)\n","            self.start += 1\n","            for i in range(len(level.transactions)-1):\n","                other_level = node()\n","                node1 = level.transactions[i]\n","                for j in range(i+1,len(level.transactions)):\n","                    node2 = level.transactions[j]\n","                    temp_node = node()\n","                    temp_node.id = node1.id + node2.id[-1]\n","                    temp_node.pattern = self.newpattern(node1.pattern,node2.pattern)\n","                    if self.checknull(temp_node.pattern) == False:\n","                        temp_node.support = level.support + 1\n","                        if temp_node.support == self.minSup:\n","                            if self.check_clossal(temp_node):                               \n","                                self.colossal_pattern.append(temp_node.pattern)\n","                        other_level.transactions.append(temp_node)\n","                    ### remainder\n","                other_level.support = level.support + 1\n","                if other_level.support > self.minSup:\n","                    pass\n","                else:\n","                    new_levels.append(other_level)\n","        if len(levels)==0:\n","            return\n","        else:\n","            levels = []\n","            return self.run_miner(new_levels)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5WOF9i8zf-Xg"},"source":["#### RUN"]},{"cell_type":"code","metadata":{"id":"eoHDBI3SqKIE","executionInfo":{"status":"ok","timestamp":1605233173846,"user_tz":-420,"elapsed":91596,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"ba6764dc-4b4d-48fe-8867-51cc496379bb","colab":{"base_uri":"https://localhost:8080/"}},"source":["def main():\n","    file = \"drive/My Drive/Colab Notebooks/DBM/Grocery.txt\"\n","    sup = 3\n","    CP_miner = cp_miner(file,sup)\n","    CP_miner.preprocess_1_itemset()   \n","    CP_miner.assign_dbv()\n","    CP_miner.make_tree(CP_miner.dbv)\n","    lit = CP_miner.colossal_pattern\n","    print('\\nThe number of colossal patterns:',CP_miner.count)\n","    ma = CP_miner.map_res\n","    for colo in lit:\n","        for i in range(len(colo)):\n","          if colo[i]==1:\n","            print(ma[i], end = ' ')\n","        print('\\n')\n","    \n","if __name__=='__main__':\n","    main()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","The number of colossal patterns: 191139\n","2 \n","\n","19 \n","\n","38 \n","\n","19 2 \n","\n","19 38 \n","\n","2 38 \n","\n","19 2 38 \n","\n","24 \n","\n","2 24 \n","\n","2 25 \n","\n","2 96 \n","\n","24 25 \n","\n","24 96 \n","\n","2 24 25 \n","\n","18 \n","\n","18 38 \n","\n","18 24 \n","\n","18 2 \n","\n","18 2 24 \n","\n","18 25 \n","\n","18 19 \n","\n","18 19 25 \n","\n","18 19 2 \n","\n","18 2 25 \n","\n","19 2 25 \n","\n","80 \n","\n","2 80 \n","\n","18 19 38 \n","\n","62 80 \n","\n","19 80 \n","\n","18 19 80 \n","\n","18 62 \n","\n","25 80 \n","\n","18 62 80 \n","\n","18 25 62 \n","\n","25 38 \n","\n","24 38 \n","\n","18 2 38 \n","\n","2 24 38 \n","\n","18 2 24 38 \n","\n","19 24 \n","\n","18 2 96 \n","\n","38 80 \n","\n","38 62 80 \n","\n","28 \n","\n","103 28 \n","\n","18 19 2 24 \n","\n","19 38 80 \n","\n","18 38 80 \n","\n","2 28 \n","\n","2 38 80 \n","\n","19 28 80 \n","\n","2 28 38 \n","\n","18 38 96 \n","\n","103 2 \n","\n","2 24 80 \n","\n","18 2 24 62 \n","\n","2 38 62 \n","\n","103 2 38 \n","\n","28 62 \n","\n","5 \n","\n","19 5 \n","\n","2 5 \n","\n","74 \n","\n","5 74 \n","\n","5 9 \n","\n","2 5 9 \n","\n","2 74 \n","\n","74 83 \n","\n","2 74 83 \n","\n","19 2 5 \n","\n","5 8 \n","\n","2 8 \n","\n","2 5 8 \n","\n","38 5 \n","\n","38 8 \n","\n","38 5 8 \n","\n","45 \n","\n","45 5 \n","\n","19 74 \n","\n","19 2 74 \n","\n","2 74 8 \n","\n","19 2 8 \n","\n","19 5 74 \n","\n","38 74 83 \n","\n","19 38 5 \n","\n","19 5 83 \n","\n","38 45 \n","\n","38 5 83 \n","\n","38 45 5 83 \n","\n","38 45 5 74 \n","\n","19 38 83 \n","\n","19 38 45 74 \n","\n","19 45 5 \n","\n","2 38 74 \n","\n","2 38 83 \n","\n","2 38 74 83 \n","\n","38 9 \n","\n","38 5 9 \n","\n","19 9 \n","\n","19 38 5 9 \n","\n","2 5 83 \n","\n","19 2 83 \n","\n","83 9 \n","\n","5 83 9 \n","\n","2 38 5 \n","\n","2 38 74 8 \n","\n","2 38 8 9 \n","\n","2 38 74 9 \n","\n","19 2 9 \n","\n","38 45 9 \n","\n","38 5 83 9 \n","\n","19 2 38 83 \n","\n","2 45 \n","\n","2 38 45 \n","\n","19 2 45 \n","\n","2 5 74 \n","\n","2 45 5 \n","\n","1 \n","\n","2 4 \n","\n","1 2 \n","\n","1 2 4 \n","\n","1 2 75 \n","\n","1 4 75 \n","\n","2 4 75 \n","\n","1 2 4 75 \n","\n","16 \n","\n","16 2 \n","\n","11 \n","\n","1 11 \n","\n","11 53 \n","\n","35 \n","\n","11 2 4 \n","\n","2 53 \n","\n","2 4 53 \n","\n","16 2 4 \n","\n","11 16 2 \n","\n","2 35 75 \n","\n","2 35 4 75 \n","\n","1 11 4 \n","\n","1 11 2 \n","\n","1 16 2 4 \n","\n","22 \n","\n","22 5 \n","\n","36 \n","\n","22 36 \n","\n","36 5 \n","\n","19 22 5 \n","\n","19 36 \n","\n","39 \n","\n","22 39 \n","\n","19 39 \n","\n","2 5 71 \n","\n","14 2 5 \n","\n","14 71 \n","\n","1 22 \n","\n","1 24 \n","\n","3 5 \n","\n","4 5 \n","\n","2 24 4 \n","\n","24 5 \n","\n","2 24 4 5 \n","\n","1 2 22 \n","\n","22 5 71 \n","\n","1 5 \n","\n","2 22 71 \n","\n","1 5 71 \n","\n","1 2 22 5 \n","\n","1 2 71 \n","\n","1 2 22 71 \n","\n","1 2 22 5 71 \n","\n","22 4 \n","\n","1 22 4 \n","\n","2 22 4 \n","\n","1 2 22 4 \n","\n","25 5 \n","\n","2 25 5 \n","\n","32 \n","\n","32 5 \n","\n","22 4 71 \n","\n","4 5 71 \n","\n","22 4 5 \n","\n","22 4 5 71 \n","\n","25 71 \n","\n","25 5 71 \n","\n","5 95 \n","\n","13 22 5 \n","\n","22 25 5 \n","\n","2 32 5 \n","\n","2 22 4 71 \n","\n","22 24 4 \n","\n","2 24 71 \n","\n","22 24 71 \n","\n","24 4 71 \n","\n","1 24 5 \n","\n","85 \n","\n","3 85 \n","\n","2 3 \n","\n","2 3 5 \n","\n","1 25 5 \n","\n","1 25 5 71 \n","\n","2 3 4 \n","\n","4 96 \n","\n","1 4 71 \n","\n","1 32 5 \n","\n","1 4 5 \n","\n","1 4 5 71 \n","\n","1 14 2 \n","\n","14 22 \n","\n","1 2 4 71 \n","\n","2 22 4 5 \n","\n","25 4 \n","\n","1 24 4 \n","\n","25 4 5 \n","\n","1 22 25 4 5 \n","\n","24 25 5 \n","\n","22 24 5 \n","\n","14 2 3 \n","\n","2 25 71 \n","\n","2 4 5 71 \n","\n","1 2 22 4 5 71 \n","\n","2 25 4 \n","\n","2 22 25 \n","\n","1 2 25 5 \n","\n","2 22 25 4 5 \n","\n","22 3 \n","\n","24 5 71 \n","\n","2 24 5 71 \n","\n","14 2 24 \n","\n","2 24 3 \n","\n","77 \n","\n","25 3 5 \n","\n","70 \n","\n","70 74 \n","\n","5 70 \n","\n","17 5 9 \n","\n","17 2 \n","\n","17 2 5 \n","\n","17 2 9 \n","\n","17 2 5 9 \n","\n","5 71 9 \n","\n","2 71 9 \n","\n","2 5 71 9 \n","\n","5 50 \n","\n","2 50 \n","\n","2 5 50 \n","\n","10 5 50 \n","\n","10 5 9 \n","\n","50 9 \n","\n","5 50 9 \n","\n","10 5 50 9 \n","\n","152 17 \n","\n","10 2 \n","\n","10 2 5 \n","\n","50 71 \n","\n","5 50 71 \n","\n","10 17 \n","\n","10 17 2 9 \n","\n","17 71 9 \n","\n","17 2 71 9 \n","\n","10 2 71 \n","\n","2 50 71 \n","\n","2 50 9 \n","\n","17 5 71 9 \n","\n","17 50 71 \n","\n","34 \n","\n","2 34 \n","\n","17 34 \n","\n","159 \n","\n","1 18 \n","\n","18 22 \n","\n","1 18 22 \n","\n","22 69 \n","\n","1 69 \n","\n","21 \n","\n","18 21 \n","\n","18 22 38 \n","\n","18 22 51 \n","\n","38 51 \n","\n","22 38 51 \n","\n","18 22 38 51 \n","\n","18 69 \n","\n","38 69 \n","\n","18 22 38 69 \n","\n","1 51 \n","\n","1 38 \n","\n","1 38 51 \n","\n","1 18 69 \n","\n","18 56 \n","\n","1 21 \n","\n","1 21 51 \n","\n","1 18 51 \n","\n","21 38 \n","\n","1 21 38 \n","\n","21 22 38 \n","\n","18 21 38 \n","\n","38 68 \n","\n","1 22 38 \n","\n","1 22 51 \n","\n","1 22 38 51 \n","\n","1 18 22 51 \n","\n","1 18 38 \n","\n","1 18 22 38 \n","\n","37 \n","\n","18 24 37 \n","\n","18 44 \n","\n","18 24 44 \n","\n","1 18 44 \n","\n","146 \n","\n","101 \n","\n","1 24 44 \n","\n","138 \n","\n","64 \n","\n","3 5 64 9 \n","\n","5 76 \n","\n","15 \n","\n","15 5 \n","\n","27 \n","\n","17 3 \n","\n","15 9 \n","\n","27 5 \n","\n","17 27 9 \n","\n","17 64 \n","\n","17 3 5 64 \n","\n","15 27 9 \n","\n","3 76 \n","\n","18 2 5 \n","\n","18 5 9 \n","\n","18 2 9 \n","\n","18 2 5 9 \n","\n","65 \n","\n","2 65 \n","\n","17 2 4 \n","\n","17 2 4 65 \n","\n","5 7 \n","\n","2 7 \n","\n","2 5 7 \n","\n","18 4 \n","\n","18 4 5 \n","\n","18 5 7 \n","\n","18 65 \n","\n","5 65 7 \n","\n","18 5 65 7 \n","\n","18 2 4 \n","\n","18 2 24 4 \n","\n","24 9 \n","\n","24 5 9 \n","\n","17 18 \n","\n","7 9 \n","\n","5 7 9 \n","\n","18 5 7 9 \n","\n","2 37 \n","\n","37 4 \n","\n","2 37 4 \n","\n","18 2 65 \n","\n","4 7 \n","\n","17 7 \n","\n","17 2 4 7 \n","\n","17 2 24 \n","\n","2 65 9 \n","\n","4 9 \n","\n","17 18 4 \n","\n","18 2 4 9 \n","\n","17 18 4 40 9 \n","\n","17 18 2 4 40 9 \n","\n","4 7 9 \n","\n","2 5 65 7 \n","\n","17 5 7 9 \n","\n","24 4 9 \n","\n","18 4 7 \n","\n","4 5 7 \n","\n","37 4 5 \n","\n","37 4 5 7 \n","\n","17 18 4 40 5 9 \n","\n","18 4 65 \n","\n","18 2 4 5 \n","\n","4 5 7 9 \n","\n","2 4 5 7 \n","\n","17 18 2 4 65 \n","\n","2 40 5 9 \n","\n","2 37 4 5 \n","\n","2 24 7 \n","\n","24 5 7 \n","\n","18 2 24 5 \n","\n","24 4 7 \n","\n","22 75 \n","\n","1 2 22 75 \n","\n","18 5 71 \n","\n","18 22 5 \n","\n","18 22 71 \n","\n","18 20 \n","\n","20 5 \n","\n","20 22 5 \n","\n","18 22 5 71 \n","\n","18 20 22 \n","\n","20 71 \n","\n","20 22 71 \n","\n","18 20 71 \n","\n","20 22 5 71 \n","\n","1 18 5 \n","\n","22 5 66 \n","\n","18 2 22 \n","\n","18 2 22 71 \n","\n","1 5 9 \n","\n","18 2 75 \n","\n","5 75 \n","\n","2 5 75 \n","\n","18 5 75 \n","\n","18 2 5 75 \n","\n","18 71 9 \n","\n","1 18 71 \n","\n","1 18 9 \n","\n","18 5 71 9 \n","\n","1 71 9 \n","\n","1 18 5 71 9 \n","\n","1 18 2 \n","\n","18 22 66 \n","\n","1 18 2 22 5 \n","\n","2 5 66 \n","\n","1 20 \n","\n","2 20 \n","\n","1 2 20 \n","\n","1 18 2 75 \n","\n","18 20 75 \n","\n","18 2 20 \n","\n","5 71 75 \n","\n","1 5 71 75 \n","\n","18 22 71 9 \n","\n","2 22 71 9 \n","\n","18 2 22 71 9 \n","\n","1 18 2 71 \n","\n","1 2 9 \n","\n","1 2 5 9 \n","\n","1 20 5 \n","\n","20 9 \n","\n","1 20 22 \n","\n","1 20 22 5 \n","\n","1 18 2 9 \n","\n","18 22 5 71 75 9 \n","\n","1 2 20 22 \n","\n","1 2 22 71 9 \n","\n","1 18 22 9 \n","\n","18 2 5 71 \n","\n","18 2 22 71 75 \n","\n","1 18 2 22 71 \n","\n","2 22 5 75 \n","\n","2 41 5 \n","\n","2 20 5 \n","\n","2 20 71 \n","\n","114 2 74 \n","\n","22 74 \n","\n","22 74 83 \n","\n","36 69 \n","\n","36 74 \n","\n","69 83 \n","\n","22 69 74 83 \n","\n","22 65 \n","\n","17 22 \n","\n","2 4 74 \n","\n","2 22 83 \n","\n","2 22 4 74 \n","\n","2 4 74 83 \n","\n","22 4 83 \n","\n","2 22 74 83 \n","\n","2 22 4 83 \n","\n","17 69 \n","\n","17 36 \n","\n","1 17 \n","\n","75 83 \n","\n","1 83 \n","\n","114 2 4 \n","\n","2 36 \n","\n","1 2 83 \n","\n","1 22 83 \n","\n","1 2 22 83 \n","\n","1 2 65 75 \n","\n","1 114 2 \n","\n","65 83 \n","\n","2 4 57 \n","\n","2 57 74 \n","\n","17 22 4 \n","\n","17 2 22 74 \n","\n","17 2 22 4 \n","\n","17 2 4 74 \n","\n","1 2 74 \n","\n","1 2 59 \n","\n","1 2 22 59 74 \n","\n","1 4 83 \n","\n","1 2 4 83 \n","\n","131 \n","\n","1 22 4 83 \n","\n","114 17 \n","\n","4 69 \n","\n","1 2 4 59 \n","\n","2 4 69 \n","\n","1 4 57 \n","\n","57 69 \n","\n","2 57 59 69 \n","\n","17 22 4 75 \n","\n","22 4 69 \n","\n","69 75 \n","\n","1 17 2 22 59 \n","\n","22 4 65 75 \n","\n","1 17 2 4 \n","\n","17 2 4 75 \n","\n","114 17 22 4 59 \n","\n","114 2 22 \n","\n","17 2 22 4 65 75 \n","\n","2 22 69 \n","\n","17 4 83 \n","\n","22 59 83 \n","\n","57 83 \n","\n","57 69 83 \n","\n","18 25 5 \n","\n","18 19 5 \n","\n","18 50 \n","\n","18 19 5 50 \n","\n","19 25 5 \n","\n","2 21 \n","\n","21 5 \n","\n","2 21 5 \n","\n","18 19 2 5 \n","\n","18 2 21 \n","\n","16 18 2 \n","\n","16 18 2 21 \n","\n","18 2 50 \n","\n","18 2 25 5 \n","\n","18 2 25 50 \n","\n","16 5 \n","\n","2 25 5 50 \n","\n","16 2 5 \n","\n","12 \n","\n","12 2 \n","\n","12 2 8 \n","\n","12 5 \n","\n","5 80 \n","\n","12 7 \n","\n","12 5 7 \n","\n","7 80 \n","\n","7 8 \n","\n","2 7 8 \n","\n","5 7 8 \n","\n","2 5 7 8 \n","\n","14 2 80 \n","\n","14 7 80 \n","\n","128 \n","\n","10 128 9 \n","\n","50 73 \n","\n","3 50 \n","\n","128 5 \n","\n","128 3 \n","\n","128 50 \n","\n","22 38 5 \n","\n","18 22 38 5 \n","\n","5 51 \n","\n","18 22 5 51 \n","\n","38 4 71 \n","\n","18 22 38 4 71 \n","\n","38 5 51 \n","\n","20 51 \n","\n","4 8 \n","\n","51 8 \n","\n","4 51 \n","\n","38 4 5 \n","\n","38 4 5 71 \n","\n","22 38 8 \n","\n","38 4 8 \n","\n","18 8 \n","\n","71 8 \n","\n","22 4 71 8 \n","\n","38 51 8 \n","\n","22 38 4 5 \n","\n","20 22 38 4 \n","\n","20 4 5 \n","\n","20 22 38 4 5 \n","\n","82 \n","\n","4 5 8 \n","\n","18 22 4 5 71 \n","\n","22 51 71 \n","\n","4 51 71 \n","\n","18 20 4 \n","\n","5 71 8 \n","\n","26 \n","\n","22 26 \n","\n","22 45 \n","\n","45 69 \n","\n","26 69 \n","\n","26 45 \n","\n","22 26 45 \n","\n","119 \n","\n","119 22 \n","\n","49 \n","\n","26 49 \n","\n","154 \n","\n","22 49 \n","\n","16 49 \n","\n","16 22 49 \n","\n","21 32 \n","\n","11 18 5 \n","\n","18 36 \n","\n","11 25 5 \n","\n","11 18 25 5 \n","\n","11 18 71 \n","\n","18 44 71 \n","\n","18 44 5 \n","\n","18 25 5 71 \n","\n","44 5 71 \n","\n","18 45 \n","\n","18 45 5 \n","\n","78 \n","\n","11 78 \n","\n","1 76 \n","\n","1 5 76 \n","\n","1 45 \n","\n","11 45 \n","\n","1 11 5 \n","\n","1 18 78 \n","\n","11 45 5 \n","\n","18 45 78 \n","\n","61 \n","\n","11 18 45 \n","\n","18 45 76 \n","\n","12 19 \n","\n","12 19 74 \n","\n","12 2 74 \n","\n","114 19 2 \n","\n","18 22 74 \n","\n","18 19 22 \n","\n","18 19 22 5 \n","\n","19 22 74 \n","\n","22 5 74 \n","\n","18 83 \n","\n","18 22 83 \n","\n","18 22 38 74 \n","\n","18 74 83 \n","\n","22 38 83 \n","\n","26 38 83 \n","\n","18 26 \n","\n","18 26 38 83 \n","\n","22 38 74 83 \n","\n","18 22 26 38 \n","\n","18 22 38 83 \n","\n","10 38 \n","\n","10 38 5 \n","\n","10 19 \n","\n","18 5 83 \n","\n","18 19 83 \n","\n","10 18 \n","\n","10 18 22 \n","\n","22 5 83 \n","\n","10 5 83 \n","\n","13 18 \n","\n","10 22 83 \n","\n","10 22 5 83 \n","\n","15 83 \n","\n","38 50 \n","\n","38 5 50 \n","\n","10 22 38 \n","\n","10 22 38 74 \n","\n","10 18 38 \n","\n","10 19 22 \n","\n","22 50 \n","\n","22 38 50 \n","\n","5 50 69 \n","\n","18 45 69 \n","\n","22 38 5 83 \n","\n","10 38 5 83 \n","\n","15 18 50 \n","\n","19 22 38 \n","\n","18 22 5 69 \n","\n","15 18 50 69 \n","\n","15 38 \n","\n","18 38 50 \n","\n","15 38 69 \n","\n","18 19 5 69 \n","\n","18 22 38 50 \n","\n","18 19 22 38 \n","\n","38 5 69 \n","\n","22 38 45 \n","\n","18 38 45 \n","\n","18 45 50 \n","\n","19 22 83 \n","\n","10 22 38 83 \n","\n","18 26 5 \n","\n","18 26 45 50 \n","\n","15 38 83 \n","\n","38 69 83 \n","\n","36 38 \n","\n","42 \n","\n","29 \n","\n","60 \n","\n","60 71 \n","\n","27 71 \n","\n","25 29 \n","\n","27 29 \n","\n","64 71 \n","\n","11 22 \n","\n","11 22 25 5 \n","\n","11 74 \n","\n","11 18 22 \n","\n","11 18 22 74 \n","\n","19 51 \n","\n","12 51 \n","\n","25 5 7 \n","\n","18 25 5 7 \n","\n","11 12 \n","\n","11 19 \n","\n","18 51 65 \n","\n","51 7 \n","\n","12 22 \n","\n","12 18 \n","\n","19 51 80 \n","\n","119 74 \n","\n","119 18 \n","\n","119 5 \n","\n","119 22 5 \n","\n","18 22 7 \n","\n","25 74 \n","\n","11 5 7 \n","\n","19 22 80 \n","\n","18 22 65 \n","\n","22 51 7 \n","\n","22 5 7 \n","\n","22 25 5 7 \n","\n","11 18 62 \n","\n","19 22 7 \n","\n","25 5 62 \n","\n","19 22 5 7 \n","\n","5 72 \n","\n","2 23 \n","\n","17 2 23 \n","\n","21 23 \n","\n","21 32 5 \n","\n","21 23 5 \n","\n","2 21 23 \n","\n","2 23 5 \n","\n","11 38 \n","\n","11 22 38 \n","\n","22 53 \n","\n","17 38 \n","\n","11 17 \n","\n","17 22 38 \n","\n","11 17 38 \n","\n","35 38 \n","\n","35 5 \n","\n","158 \n","\n","22 25 38 \n","\n","11 25 38 5 \n","\n","38 53 \n","\n","158 53 \n","\n","17 22 5 \n","\n","17 22 38 5 \n","\n","17 25 5 \n","\n","38 78 \n","\n","17 35 \n","\n","25 35 \n","\n","4 60 \n","\n","4 58 \n","\n","26 4 \n","\n","4 49 \n","\n","18 2 83 \n","\n","18 2 44 \n","\n","44 83 \n","\n","18 71 83 \n","\n","11 2 4 74 \n","\n","18 2 22 83 \n","\n","11 2 83 \n","\n","18 2 4 74 \n","\n","38 4 60 \n","\n","2 38 4 \n","\n","2 22 38 74 \n","\n","11 18 2 4 71 74 \n","\n","11 22 38 4 \n","\n","11 38 4 74 \n","\n","2 22 38 4 \n","\n","2 22 38 71 74 \n","\n","18 2 22 4 71 \n","\n","11 18 2 38 \n","\n","2 38 4 74 \n","\n","11 18 22 4 74 \n","\n","11 38 4 71 \n","\n","2 38 4 71 \n","\n","11 2 38 4 71 \n","\n","18 2 22 38 4 71 \n","\n","24 38 4 \n","\n","18 38 44 \n","\n","11 4 83 \n","\n","18 4 83 \n","\n","18 2 4 83 \n","\n","18 2 4 71 83 \n","\n","22 4 60 \n","\n","2 60 \n","\n","44 60 \n","\n","38 4 83 \n","\n","11 24 38 \n","\n","22 38 4 83 \n","\n","24 38 4 83 \n","\n","11 24 38 4 \n","\n","18 4 44 \n","\n","2 4 44 \n","\n","2 24 44 \n","\n","24 4 44 \n","\n","18 24 4 44 \n","\n","18 22 38 4 44 71 \n","\n","11 58 \n","\n","2 26 4 \n","\n","2 26 38 83 \n","\n","2 26 38 4 \n","\n","2 38 4 83 \n","\n","18 2 26 \n","\n","18 2 26 4 \n","\n","18 24 58 \n","\n","2 58 \n","\n","2 22 44 \n","\n","18 22 4 83 \n","\n","11 18 2 24 \n","\n","22 71 83 \n","\n","38 4 44 83 \n","\n","22 38 60 \n","\n","4 44 60 \n","\n","24 26 \n","\n","18 60 \n","\n","18 2 26 38 \n","\n","18 2 38 83 \n","\n","2 22 38 83 \n","\n","1 10 \n","\n","1 10 5 \n","\n","10 51 \n","\n","1 38 5 \n","\n","115 \n","\n","10 38 9 \n","\n","24 38 5 \n","\n","115 38 \n","\n","10 115 24 \n","\n","10 24 5 \n","\n","12 38 \n","\n","12 9 \n","\n","1 12 \n","\n","1 38 9 \n","\n","1 5 51 9 \n","\n","1 38 51 9 \n","\n","1 12 5 \n","\n","1 24 38 \n","\n","10 38 5 9 \n","\n","1 19 38 \n","\n","19 24 5 \n","\n","18 3 \n","\n","3 36 \n","\n","104 18 \n","\n","17 18 44 \n","\n","17 18 69 \n","\n","17 18 3 \n","\n","18 44 69 \n","\n","1 17 18 \n","\n","1 104 18 \n","\n","19 2 3 \n","\n","18 2 5 83 \n","\n","19 44 \n","\n","19 5 75 \n","\n","2 44 5 \n","\n","2 3 75 \n","\n","18 2 3 5 75 \n","\n","1 18 83 \n","\n","1 5 83 \n","\n","1 18 5 83 \n","\n","1 5 7 \n","\n","100 9 \n","\n","1 18 71 83 \n","\n","25 9 \n","\n","25 83 \n","\n","18 7 71 \n","\n","1 154 9 \n","\n","5 7 71 \n","\n","5 7 71 9 \n","\n","1 5 7 71 \n","\n","1 25 5 9 \n","\n","7 83 \n","\n","12 81 \n","\n","11 3 \n","\n","11 2 70 \n","\n","11 37 70 \n","\n","23 4 \n","\n","4 70 \n","\n","2 70 74 \n","\n","11 4 70 74 \n","\n","2 23 4 \n","\n","2 23 74 \n","\n","2 23 4 70 \n","\n","12 70 \n","\n","12 4 \n","\n","19 4 \n","\n","12 3 \n","\n","11 19 2 \n","\n","19 2 53 \n","\n","19 2 4 \n","\n","154 19 2 \n","\n","114 2 53 \n","\n","23 3 \n","\n","2 3 70 \n","\n","2 23 3 \n","\n","114 2 23 \n","\n","2 36 53 \n","\n","19 2 23 \n","\n","10 18 2 \n","\n","1 10 2 \n","\n","10 66 \n","\n","46 \n","\n","2 46 \n","\n","18 2 46 \n","\n","10 2 22 \n","\n","1 18 2 83 \n","\n","1 22 46 \n","\n","2 51 \n","\n","21 75 \n","\n","10 2 21 \n","\n","10 75 \n","\n","1 2 51 \n","\n","1 2 21 \n","\n","10 20 \n","\n","18 65 75 \n","\n","18 2 65 75 \n","\n","17 4 8 \n","\n","17 2 4 8 \n","\n","2 51 8 \n","\n","4 7 8 \n","\n","17 51 \n","\n","2 4 51 \n","\n","114 5 \n","\n","2 76 \n","\n","1 118 \n","\n","114 2 5 \n","\n","1 2 5 7 \n","\n","114 2 5 7 \n","\n","4 45 \n","\n","10 11 \n","\n","22 81 \n","\n","18 53 \n","\n","3 45 \n","\n","11 38 45 \n","\n","3 38 \n","\n","1 2 38 \n","\n","1 2 38 5 \n","\n","54 \n","\n","5 54 \n","\n","70 9 \n","\n","11 2 9 \n","\n","11 70 9 \n","\n","15 2 \n","\n","136 \n","\n","2 49 74 \n","\n","18 2 4 49 \n","\n","115 2 4 \n","\n","136 18 \n","\n","4 46 \n","\n","136 18 2 \n","\n","104 18 2 \n","\n","115 18 \n","\n","4 64 \n","\n","2 64 \n","\n","18 2 88 \n","\n","21 38 4 \n","\n","23 38 \n","\n","21 23 27 \n","\n","27 38 \n","\n","27 4 \n","\n","21 23 38 \n","\n","27 38 4 \n","\n","23 71 \n","\n","23 27 71 \n","\n","23 27 38 \n","\n","23 38 4 71 \n","\n","21 38 5 \n","\n","38 75 \n","\n","38 4 5 75 \n","\n","4 50 \n","\n","38 4 50 \n","\n","1 50 \n","\n","1 38 50 \n","\n","4 5 60 \n","\n","1 21 5 \n","\n","4 50 71 \n","\n","1 23 5 \n","\n","1 27 \n","\n","23 27 5 \n","\n","136 5 \n","\n","23 50 \n","\n","1 5 50 \n","\n","1 38 4 \n","\n","1 4 50 \n","\n","4 5 71 75 \n","\n","5 50 75 \n","\n","38 4 5 50 71 \n","\n","38 4 50 71 75 \n","\n","1 38 71 \n","\n","23 38 75 \n","\n","23 38 5 \n","\n","10 4 \n","\n","2 21 38 \n","\n","2 21 38 4 \n","\n","10 38 4 \n","\n","10 2 38 \n","\n","38 70 \n","\n","38 4 70 \n","\n","38 4 9 \n","\n","38 4 70 9 \n","\n","18 23 38 \n","\n","17 18 38 \n","\n","17 18 23 \n","\n","17 18 23 38 \n","\n","17 18 22 4 \n","\n","10 17 22 4 \n","\n","70 8 \n","\n","38 70 74 8 \n","\n","2 38 49 \n","\n","2 38 70 \n","\n","22 38 49 \n","\n","22 70 \n","\n","22 38 70 \n","\n","2 22 8 \n","\n","2 22 38 70 \n","\n","2 27 \n","\n","2 23 27 \n","\n","10 27 9 \n","\n","2 27 9 \n","\n","11 17 2 \n","\n","10 2 27 \n","\n","10 11 2 9 \n","\n","27 38 9 \n","\n","10 27 38 \n","\n","2 27 4 49 \n","\n","16 4 49 9 \n","\n","18 2 27 \n","\n","4 70 8 \n","\n","17 70 \n","\n","17 4 70 \n","\n","2 23 38 \n","\n","11 38 70 \n","\n","38 4 74 8 \n","\n","11 38 4 70 \n","\n","38 4 49 \n","\n","2 27 38 \n","\n","2 39 \n","\n","18 39 \n","\n","17 18 71 \n","\n","17 22 38 71 9 \n","\n","17 18 22 4 40 71 9 \n","\n","18 38 40 \n","\n","17 38 4 \n","\n","17 22 38 4 9 \n","\n","38 4 71 9 \n","\n","17 18 22 38 9 \n","\n","17 18 22 38 4 71 \n","\n","22 39 4 \n","\n","2 38 39 \n","\n","18 23 71 \n","\n","17 18 23 71 \n","\n","17 2 22 71 9 \n","\n","17 2 38 \n","\n","17 2 38 74 \n","\n","17 2 22 38 71 \n","\n","2 40 71 \n","\n","18 2 40 71 \n","\n","17 18 2 22 4 71 \n","\n","22 23 \n","\n","16 38 \n","\n","11 2 40 \n","\n","22 4 49 \n","\n","18 2 23 \n","\n","2 22 23 \n","\n","18 2 22 23 4 \n","\n","2 71 8 \n","\n","17 18 38 70 \n","\n","17 18 2 38 70 \n","\n","17 2 38 4 \n","\n","22 52 71 \n","\n","16 22 4 \n","\n","18 2 23 38 \n","\n","70 71 \n","\n","22 70 71 \n","\n","2 22 23 74 \n","\n","38 4 70 71 \n","\n","17 18 22 38 70 \n","\n","18 2 23 71 \n","\n","16 2 22 \n","\n","128 23 \n","\n","2 22 23 38 \n","\n","18 2 22 23 38 4 71 \n","\n","128 2 \n","\n","24 38 4 5 \n","\n","115 2 38 4 \n","\n","2 4 5 75 \n","\n","2 24 75 \n","\n","24 35 \n","\n","35 38 4 \n","\n","2 38 75 \n","\n","2 35 38 \n","\n","2 38 4 75 \n","\n","10 38 4 5 \n","\n","12 50 \n","\n","38 50 70 \n","\n","4 73 \n","\n","4 50 9 \n","\n","38 4 7 \n","\n","7 70 \n","\n","38 4 7 70 \n","\n","4 68 9 \n","\n","38 73 \n","\n","17 38 44 \n","\n","23 44 \n","\n","29 4 \n","\n","2 29 \n","\n","2 29 4 \n","\n","2 29 3 \n","\n","38 76 \n","\n","38 64 \n","\n","17 19 \n","\n","19 22 4 \n","\n","17 19 22 \n","\n","18 19 22 4 \n","\n","89 \n","\n","2 38 51 \n","\n","1 2 8 \n","\n","2 22 50 \n","\n","1 2 50 \n","\n","14 2 38 \n","\n","1 2 22 38 \n","\n","22 38 59 \n","\n","2 38 59 \n","\n","2 22 38 59 74 \n","\n","2 51 59 \n","\n","14 2 70 \n","\n","2 38 50 \n","\n","119 2 \n","\n","119 2 4 \n","\n","1 119 2 \n","\n","11 2 29 \n","\n","1 18 2 4 \n","\n","1 18 2 4 71 \n","\n","1 18 2 4 83 \n","\n","11 18 2 29 \n","\n","119 2 5 \n","\n","119 2 22 \n","\n","71 73 \n","\n","2 4 50 \n","\n","22 4 50 \n","\n","22 4 50 71 \n","\n","2 73 \n","\n","2 4 50 71 \n","\n","23 89 \n","\n","23 76 \n","\n","23 69 \n","\n","20 23 \n","\n","23 5 69 \n","\n","50 76 \n","\n","44 7 \n","\n","136 17 \n","\n","17 20 \n","\n","17 45 \n","\n","17 18 45 \n","\n","18 3 45 \n","\n","65 71 \n","\n","125 \n","\n","28 71 \n","\n","103 71 \n","\n","158 71 \n","\n","64 7 \n","\n","19 2 27 \n","\n","17 19 9 \n","\n","19 20 \n","\n","11 38 4 5 \n","\n","38 46 \n","\n","1 20 38 4 \n","\n","1 20 22 4 \n","\n","1 20 22 38 4 \n","\n","20 22 83 \n","\n","20 22 4 83 \n","\n","20 24 \n","\n","20 25 \n","\n","20 38 4 83 \n","\n","11 24 5 \n","\n","20 24 4 \n","\n","1 38 83 \n","\n","1 38 4 83 \n","\n","27 38 83 \n","\n","114 17 5 \n","\n","22 38 75 \n","\n","25 75 \n","\n","22 25 75 \n","\n","18 2 78 \n","\n","1 18 2 4 78 \n","\n","15 18 44 50 \n","\n","4 44 9 \n","\n","15 4 44 \n","\n","18 4 50 \n","\n","1 4 44 \n","\n","2 38 53 \n","\n","2 23 38 76 \n","\n","22 7 71 \n","\n","4 7 71 \n","\n","22 4 7 71 \n","\n","25 4 5 7 \n","\n","45 70 \n","\n","38 45 70 \n","\n","25 45 \n","\n","5 7 70 \n","\n","19 38 4 \n","\n","19 2 38 4 \n","\n","4 49 83 \n","\n","2 26 3 \n","\n","2 3 38 \n","\n","158 2 \n","\n","26 3 4 \n","\n","18 4 69 \n","\n","18 2 69 \n","\n","18 2 53 \n","\n","114 18 2 \n","\n","38 4 80 \n","\n","19 22 38 4 \n","\n","18 69 71 \n","\n","19 22 71 \n","\n","19 38 71 \n","\n","19 22 38 71 \n","\n","18 22 4 75 \n","\n","17 22 4 5 9 \n","\n","4 5 71 9 \n","\n","17 18 22 4 71 75 \n","\n","22 4 5 75 \n","\n","71 80 \n","\n","17 38 4 75 \n","\n","22 44 5 \n","\n","38 4 5 9 \n","\n","38 4 44 5 \n","\n","18 50 75 \n","\n","18 38 75 \n","\n","19 5 71 \n","\n","18 19 71 \n","\n","19 38 4 71 \n","\n","22 38 4 50 \n","\n","18 38 50 75 \n","\n","1 19 2 22 38 \n","\n","2 20 4 \n","\n","2 28 44 \n","\n","20 80 \n","\n","22 28 \n","\n","20 28 \n","\n","20 38 4 44 \n","\n","19 2 22 4 \n","\n","18 23 69 \n","\n","23 62 \n","\n","17 22 59 9 \n","\n","1 17 22 9 \n","\n","2 59 71 \n","\n","17 2 38 45 \n","\n","19 2 71 \n","\n","2 45 71 \n","\n","19 2 38 71 \n","\n","18 22 4 65 75 \n","\n","2 5 7 71 \n","\n","2 25 40 \n","\n","7 75 \n","\n","2 7 75 \n","\n","114 22 5 \n","\n","114 4 5 \n","\n","2 25 5 75 \n","\n","1 4 7 \n","\n","22 7 75 \n","\n","22 5 7 71 \n","\n","114 2 22 5 \n","\n","4 5 7 71 \n","\n","2 22 5 7 \n","\n","2 22 4 5 7 \n","\n","18 2 23 69 \n","\n","18 2 23 5 \n","\n","2 23 5 69 \n","\n","10 7 \n","\n","10 44 5 \n","\n","24 5 7 71 \n","\n","28 5 \n","\n","2 24 45 \n","\n","24 70 \n","\n","2 45 70 \n","\n","2 3 45 75 \n","\n","24 3 45 \n","\n","24 7 70 \n","\n","18 2 45 \n","\n","38 61 \n","\n","18 2 24 45 \n","\n","38 4 64 \n","\n","35 38 64 \n","\n","35 4 64 \n","\n","18 2 45 50 \n","\n","18 2 23 45 \n","\n","23 25 \n","\n","20 7 \n","\n","114 44 5 \n","\n","20 60 \n","\n","16 22 5 \n","\n","24 54 \n","\n","18 2 76 \n","\n","26 3 45 \n","\n","38 57 83 \n","\n","23 28 \n","\n","27 69 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1Oy1X2_FgXKh"},"source":["a = ['a', 'b', 'b', 'b', 'c', 'd']\n","node = 'b'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q1IRiocnKgyZ"},"source":["for pattern in a:\n","  TF = True \n","  for i in range(len(node)):\n","    if pattern[i] != node[i]:\n","      TF = False\n","      break\n","  if TF:\n","    a.remove(pattern)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2xpkEIpYqHlU","executionInfo":{"status":"ok","timestamp":1605232590686,"user_tz":-420,"elapsed":675,"user":{"displayName":"Hồng Quân Vũ","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GggAOxvbmrh_ts8RM8ri60bN1E_IHpngi4OPJ2bug=s64","userId":"11581239758501364356"}},"outputId":"45255995-af2a-47c7-d147-c2f3d05fbfcc","colab":{"base_uri":"https://localhost:8080/"}},"source":["m = {'1':'v', '2':'b'}\n","print(m['1'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["v\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IL4wC_EjqOl8"},"source":[""],"execution_count":null,"outputs":[]}]}